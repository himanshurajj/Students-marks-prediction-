# -*- coding: utf-8 -*-
"""hours and percentage.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r7-ysMR77JX_rBh5-niagbd7oYelCCBr

# **# Simple Linear Regression**

# ***In given task we have to predict the percentage of marks expected by the student based upon the number of hours they studied.***

# **## Importing the libraries(1st step is to import libraries)**
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""# **Importing the dataset(2nd step is to import the data set)** 

---


"""

dataset = pd.read_csv('hours and scores (1).csv')
print("The data is imported successfully")
X = dataset.iloc[:, :-1].values
y = dataset.iloc[:, 1].values
dataset

"""#  **Splitting the dataset into the Training set and Test set (3rd step)**

This is the 3rd task where we learn about training set and test set using sklearn model

# Splitting the Data
"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 1/3, random_state = 0)

"""## Training the Simple Linear Regression model on the Training set"""

from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train, y_train)

"""# **Visualization of data (4th step)**

1.   List item
2.   List item

## Visualising the Training set results
"""

plt.scatter(X_train, y_train, color = 'red')
plt.plot(X_train, regressor.predict(X_train), color = 'blue')
plt.title('Hours vs Percentage (Training set)')
plt.xlabel('Hours Studied')
plt.ylabel('Percentage Score')
plt.show()

"""## Visualising the Test set results"""

plt.scatter(X_test, y_test, color = 'red')
plt.plot(X_train, regressor.predict(X_train), color = 'blue')
plt.title('Hours vs Percentage(Test set)')
plt.xlabel('Hours Studied')
plt.ylabel('Percentage Score')
plt.show()

"""# **To know an intercept and a slope of the model( 5th step)**"""

print(regressor.intercept_)

print(regressor.coef_)

# Plotting the regression line
line = regressor.coef_*X+regressor.intercept_

# Plotting for the test data
plt.scatter(X, y)
plt.plot(X, line);
plt.show()

"""# **Making Prediction (6th step, here we learn about prediction of our model)**

Predicting the Test set results
"""

y_pred = regressor.predict(X_test)

print(X_test) # Testing data - In Hours
y_pred = regressor.predict(X_test) # Predicting the scores

df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
df

dataset.describe()

"""
# #**Let's predict the score for 9.25 hours (7th step )**"""

#Let's predict the score for 9.25 hpurs
print('Score of student who studied for 9.25 hours a dat', regressor.predict([[9.25]]))

"""# **Model Evaluation Metrics(8th step)**

For checking the efficiency of model
"""

from sklearn import metrics  
print('Mean Absolute Error:', 
      metrics.mean_absolute_error(y_test, y_pred))

"""# **# Task is completed, Thankyou!**"""